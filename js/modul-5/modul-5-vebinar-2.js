// ==================================constructor=================================
// function Human(name, age) {
//   this.name = name;
//   this.age = age;

//   return this;
// }
// –Ω–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥ –±–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
// const bobby = Human.call({}, 'Bobby', 25);

// console.log(bobby); // {name: 'Bobby', age: 25}

// –Ω–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥ –±–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
// const bobby = new Human('Bobby', 25);
// const david = new Human('David', 18);
// const alex = new Human('Alex', 20);

// console.log(bobby); // Human¬†{name: 'Bobby', age: 25}
// console.log(david); // Human¬†{name: 'David', age: 18}
// console.log(alex); // Human¬†{name: 'Alex', age: 20}

// ==================================prototype=================================
// class Human {
//   constructor({ name = 'Name', age = 0 } = {}) {
//     this.name = name;
//     this.age = age;
//   }
// }

// class Doctor extends Human {
//   constructor({ specialty = 'doctor', ...rest } = {}) {
//     super(rest);
//     this.specialty = specialty;
//   }
// }

// const bobby = new Human({ name: 'Bobby', age: 25 });
// const david = new Human({ name: 'David', age: 18 });
// const alex = new Human({ name: 'Alex', age: 20 });

// const house = new Doctor({ name: 'dr. House', age: 50, specialty: 'neurosurgeon' });

// console.log(bobby); // Human¬†{name: 'Bobby', age: 25}
// console.log(david); // Human¬†{name: 'David', age: 18}
// console.log(alex); // Human¬†{name: 'Alex', age: 20}

// console.log(house); // Doctor¬†{name: 'dr. House', age: 50, specialty: 'neurosurgeon'}

// ===============================—ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è===============================
// class Human {
//   #age = 0;
//   constructor({ name = 'Name', age = 0 } = {}) {
//     this.name = name;
//     this.#age = age;
//   }

//   get age() {
//     return this.#age;
//   }

//   set age(newAge) {
//     this.#age = newAge;
//   }
// }

// const ted = new Human({ name: 'Ted', age: 24 });
// console.log(ted); // Human¬†{name: 'Ted', #age: 24}

// console.log(ted.#age); // Uncaught SyntaxError: Private field '#age' must be declared in an enclosing class

// ted.age = 30;
// console.log(ted); // Human¬†{name: 'Ted', #age: 30}

// ===============================–≥–µ—Ç—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç—Ç–µ—Ä–∏===============================
// class Account {
//   #balance = 0;

//   constructor(balance) {
//     this.#balance = balance;
//   }

//   get balance() {
//     return this.#balance;
//   }

//   set balance(newBalance) {
//     if (newBalance < 0) return;
//     this.#balance = newBalance;
//   }
// }
// const deposit = new Account(1000);
// console.log(deposit.balance);

// deposit.balance = 2000;
// console.log(deposit.balance);

// deposit.balance = -3000;
// console.log(deposit.balance);

// ===============================prototype===============================
// class Human {
//   constructor(name, age) {
//     this.name = name;
//     this.age = age;
//   }

//   sayHello() {
//     console.log(`Hello my name is ${this.name}`);
//   }
// }

// class Doctor extends Human {
//   heal() {
//     console.log('I can heal');
//   }
// }

// const ted = new Human('Ted', 18);
// console.log(ted); // Human¬†{name: 'Ted', age: 18}

// const logan = new Doctor('Logan', 30);
// console.log(logan); // Doctor¬†{name: 'Logan', age: 30}

// ======================closure - –∑–∞–º–∏–∫–∞–Ω–Ω—è=========================
// function Counter(x) {
//   return function () {
//     console.log(x++);
//   };
// }
// const counter1 = new Counter(10);

// counter1();
// counter1();
// counter1();
// counter1();

// counter1.x = 50;

// counter1();
// counter1();
// counter1();

// console.log(counter1);
// // console.log(counter1.x);

// ======================closure - –∑–∞–º–∏–∫–∞–Ω–Ω—è=========================

// class Human {
//   constructor(name) {
//     this.name = name;
//   }

//   say() {
//     return `Hello, my name is ${this.name}, I like travelling`;
//   }
// }

// class Men extends Human {
//   constructor(name) {
//     super(name)
//   }
//   // –ë–µ—Ä–µ–º –º–µ—Ç–æ–¥ say —É —Ä–æ–¥–∏—Ç–µ–ª—è.
// }

// class Coder extends Human {
//   constructor(name) {
//     super(name)
//   }

//   say() {
//     // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è say –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
//     return `Hello, my name is ${this.name}, I like coding`;
//   }
// }

// const alex = new Men('Alex');
// const leo = new Coder('Leo');

// alex.say() // "Hello, my name is Alex, I like travelling"
// leo.say() // "Hello, my name is Leo, I like coding"

// =============================================–ó–∞–¥–∞—á–∞ 1==============================================
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Blogger –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ –±–ª–æ–≥–≥–µ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:

// email - –ø–æ—á—Ç–∞, —Å—Ç—Ä–æ–∫–∞
// age - –≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–æ
// numberOfPosts - –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å—Å–∏–≤ —Ç–µ–º –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–≥–≥–µ—Ä
// –ö–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ getInfo(), –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
//  User ${ –ø–æ—á—Ç–∞ } is ${ –≤–æ–∑—Ä–∞—Å—Ç } years old and has ${ –∫–æ–ª - –≤–æ –ø–æ—Å—Ç–æ–≤ } posts.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ updatePostCount(value), –∫–æ—Ç–æ—Ä—ã–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ value –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
//  –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

// class Blogger {
//   constructor({ email, age, numberOfPosts, topics } = {}) {
//     this.email = email;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }

//   getInfo() {
//     return `Blogger ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts.`;
//   }

//   updatePostCount(value) {
//     return (this.numberOfPosts += value);
//   }
// }

// const mango = new Blogger({
//   email: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango.getInfo()); // Blogger mango@mail.com is 24 years old and has 20 posts.
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // Blogger mango@mail.com is 24 years old and has 25 posts.

// const poly = new Blogger({
//   email: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // Blogger poly@mail.com is 19 years old and has 17 posts.
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // Blogger poly@mail.com is 19 years old and has 21 posts.

// =============================================–ó–∞–¥–∞—á–∞ 2=============================================
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Storage –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤.
// –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π—Å—Ç–≤–æ items.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:

// getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤.
// addItem(item) - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Ç–µ–∫—É—â–∏–º.
// removeItem(item) - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö.

// class Storage {
//   constructor(items = []) {
//     this.items = items;
//   }

//   getItems() {
//     return this.items;
//   }

//   addItem(item) {
//     this.items.push(item);
//   }

// –º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
//   removeItem(item) {
//     const idx = this.items.findIndex(el => el === item);
//     return this.items.splice(idx, 1);
//   }

// —Ä—ñ—à–µ–Ω–Ω—è - –ø–æ–ø—É–ª—è—Ä–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞
//   removeItem(name) {
//     this.items = this.items.filter(item => item !== name);
//   }
// }

// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// const items = storage.getItems();
// console.log(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// console.log(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// console.log(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// =============================================–ó–∞–¥–∞—á–∞ 3=============================================
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å User –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ login –∏ email.
// –û–±—ä—è–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ #login –∏ #email, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä login –∏ email.

// class User {
//   #login;
//   #email;
//   constructor({ login, email } = {}) {
//     this.#login = login;
//     this.#email = email;
//   }

//   get login() {
//     return this.#login;
//   }

//   get email() {
//     return this.#email;
//   }

//   set login(newLogin) {
//     this.#login = newLogin;
//   }

//   set email(newEmail) {
//     this.#email = newEmail;
//   }
// }

// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });

// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie

// console.log(mango.email); // mango@dog.woof
// mango.email = 'mango@supermail.com';
// console.log(mango.email); // mango@supermail.com

// console.log(poly.email); // poly@mail.com
// poly.email = 'poly@supermail.com';
// console.log(poly.email); // poly@supermail.com

// =============================================–ó–∞–¥–∞—á–∞ 4=============================================
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Notes –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items.
// –ó–∞–º–µ—Ç–∫–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ text –∏ priority.
// –î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ Priority, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã addNote(note), removeNote(text) –∏ updatePriority(text, newPriority).

// class Notes {
//   static Priority = {
//     LOW: 'low',
//     NORMAL: 'normal',
//     HIGH: 'high',
//   };
//   constructor(items = []) {
//     this.items = items;
//   }

//   addNote(note) {
//     this.items.push(note);
//   }

//   removeNote(text) {
//     this.items = this.items.filter(item => item.text !== text);
//   }

//   updatePriority(text, newPriority) {
//     this.items = this.items.map(item =>
//       item.text === text ? { ...item, priority: newPriority } : item
//     );
//   }
// }

// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: '–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞');
// console.log(myNotes.items);

// myNotes.updatePriority('–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);

// =============================================–ó–∞–¥–∞—á–∞ 5=============================================
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Toggle –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ { isOpen: boolean }
// –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ on - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª / –≤—ã–∫–ª(true / false).
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ on –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false.

// class Toggle {
//   constructor({ isOpen = false } = {}) {
//     this.on = isOpen;
//   }

//   toggle() {
//     this.on = !this.on;
//   }
// }

// const firstToggle = new Toggle({ isOpen: true });
// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');

// const secondToggle = new Toggle();
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');
