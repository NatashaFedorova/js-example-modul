//==================================Callback-function===========================================
// function greet(name) {
//   return `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}`;
// }
// –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω—É—Ü—ñ—é —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// console.log(greet('Nata'));
// –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ Nata

// –≤–∏–≤–æ–¥–∏–º–æ —Ñ–Ω–∫—Ü—ñ—é greet —É –∫–æ–Ω—Å–æ–ª—å
// console.log(greet);
// ∆í greet(name) {
//   return `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}`;
// }

// const functionGreet = greet;
// console.log(functionGreet);
// ∆í greet(name) {
//   return `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}`;
// }
//==========================Callback-function & higher order function===========================================
// Callback-function, –Ω–∏–∂—á–µ
// function greet(name) {
//   console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ${name}`);
// }
// // higher order function, –Ω–∏–∂—á–µ
// function registerGuest(name, callback) {
//   console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}`);
//   callback(name);
// }

// registerGuest('Nata', greet);

//==========================Callback-function & higher order function===========================================
// –ø—Ä–∏–∫–ª–∞–¥ 2( –º—ñ–π)
// function messageAboutAdult(number) {
//   return `–í–∏ –ø–æ–≤–Ω–æ–ª—Ç–Ω—ñ–π! –í–∞—à –≤—ñ–∫  ${number}`;
// }
// function adult(number, messageAboutAdult) {
//   if (number >= 18) {
//     const res = messageAboutAdult(number);
//     return res;
//   }
//   return `–í–∏ –Ω–µ –ø–æ–≤–Ω–æ–ª—Ç–Ω—ñ–π!  –í–∞—à –≤—ñ–∫  ${number}`;
// }

// console.log(adult(23, messageAboutAdult));
// console.log(adult(17, messageAboutAdult));

//==========================================–Ü–Ω–ª–∞–π–Ω –∫–æ–ª–±–µ–∫–∏======================================================
// function registerGuest(name, callback) {
//   console.log(`–í—ñ—Ç–∞—î–º–æ ${name}`);
//   callback(name);
// }

// registerGuest('Nata', function greet(name) {
//   console.log(`–®–∞–Ω–æ–≤–Ω–∏–π (-–≤–Ω–∞) ${name}, –º–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –¥–ª—è –≤–∞—Å –Ω–æ–º–µ—Ä`);
// });

// registerGuest('Poly', function greet(name) {
//   console.log(`–®–∞–Ω–æ–≤–Ω–∏–π (-–≤–Ω–∞) ${name}, –≤–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π —á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω`);
// });

//=======================================–î–µ–∫—ñ–ª—å–∫–∞ –∫–æ–ª–±–µ–∫—ñ–≤===================================================
// function processCall(recipient, onAvailable, onNotAvailable) {
//   // –Ü–º—ñ—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏—Å–ª–æ–º
//   const isRecipientAvailable = Math.random() > 0.5;
//   console.log(isRecipientAvailable);

//   if (!isRecipientAvailable) {
//     onNotAvailable(recipient);
//     return;
//   }

//   onAvailable(recipient);
// }

// function takeCall(name) {
//   console.log(`–ó'—î–¥–Ω—É—î–º–æ –∑ ${name}, –æ—á—ñ–∫—É–π—Ç–µ...`);
//   // –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –¥–∑–≤—ñ–Ω–∫–∞
// }

// function activateAnsweringMachine(name) {
//   console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.`);
//   // –õ–æ–≥—ñ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞
// }

// function leaveHoloMessage(name) {
//   console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ø–∏—Å—É—î–º–æ –≥–æ–ª–æ–≥—Ä–∞–º—É.`);
//   // –õ–æ–≥—ñ–∫–∞ –∑–∞–ø–∏—Å—É –≥–æ–ª–æ–≥—Ä–∞–º–∏
// }

// // processCall('–ú–∞–Ω–≥–æ', takeCall, activateAnsweringMachine);
// processCall('–ü–æ–ª—ñ', takeCall, leaveHoloMessage);

//=================================–ê–±—Å—Ç—Ä–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è=========================================
// –Ω–∞–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç console.log() N —Ä–∞–∑
// function repeatLog(n) {
//   for (let i = 0; i < n; i += 1) {
//     console.log(i);
//   }
// }

// repeatLog(5);
// repeatLog(10);

//=================================–ê–±—Å—Ç—Ä–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è=========================================
// –û—Å–∫—ñ–ª—å–∫–∏ ¬´—Ä–æ–±–∏—Ç–∏ —â–æ—Å—å¬ª –º–æ–∂–Ω–∞ —É—è–≤–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—î—é,
// –∞ —Ñ—É–Ω–∫—Ü—ñ—ó - —Ü–µ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–Ω—è, –º–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥—ñ—é —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
// function printValue(value) {
//   console.log(value);
// }

// function prettyPrint(value) {
//   console.log('Logging value: ', value);
// }

// function repeat(n, action) {
//   for (let i = 0; i < n; i += 1) {
//     action(i);
//   }
// }

// printValue(2);
// prettyPrint(2);

// –ü–µ—Ä–µ–¥–∞—î–º–æ printValue —è–∫ callback-—Ñ—É–Ω–∫—Ü—ñ—é
// repeat(3, printValue);
// 0
// 1
// 2

// –ü–µ—Ä–µ–¥–∞—î–º–æ prettyPrint —è–∫ callback-—Ñ—É–Ω–∫—Ü—ñ—é
// repeat(3, prettyPrint);
// Logging value: 0
// Logging value: 1
// Logging value: 2

//=================================–ú–µ—Ç–æ–¥ forEach=========================================
// –º–∞—Å—Å–∏–≤.forEach(function callback(element, index, array) {
//   // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

//===============================–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó=======================================
// –ó–≤–∏—á–∞–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// // –¢–µ —Å–∞–º–µ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
// const arrowAdd = (a, b, c) => {
//   return a + b + c;
// };

// console.log(arrowAdd(1, 2, 3));

//================–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó - explicit return (—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è)=============================
// const add = (a, b, c) => {
//   console.log(a, b, c); // 1 2 3
//   return a + b + c;
// };
// console.log(add(1, 2, 3)); // 6

//================–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó - implicit return (–Ω–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è)=============================
// const add = (a, b, c) => a + b + c;
// console.log(add(1, 2, 3)); //

//==========================–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments================================
// const add = (...args) => {
//   console.log(args);
// };

// add(1, 2, 3); // [1, 2, 3]

//=================================–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∫–æ–ª–±–µ–∫–∏=======================================
// const numbers = [5, 10, 15, 20, 25];

// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// numbers.forEach(function (number, index) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// });

// –ê–Ω–æ–Ω—ñ–º–Ω–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// numbers.forEach((number, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// });

// =============
// const colors = ['black', 'red', 'blue'];
// colors.forEach((color, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å - ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è - ${color}`);
// });

// =============
// const basket = [
//   { name: 'üçé', price: 50 },
//   { name: 'üçá', price: 70 },
//   { name: 'üçë', price: 60 },
//   { name: 'üçå', price: 110 },
// ];

// basket.forEach((product, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å - ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è - ${product.name}`);
// });
// –Ü–Ω–¥–µ–∫—Å - 0, –∑–Ω–∞—á–µ–Ω–Ω—è - üçé
// –Ü–Ω–¥–µ–∫—Å - 1, –∑–Ω–∞—á–µ–Ω–Ω—è - üçá
// –Ü–Ω–¥–µ–∫—Å - 2, –∑–Ω–∞—á–µ–Ω–Ω—è - üçë
// –Ü–Ω–¥–µ–∫—Å - 3, –∑–Ω–∞—á–µ–Ω–Ω—è - üçå

//========================–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∫–æ–ª–±–µ–∫–∏ o–≥–æ–ª–æ—à—É—î–º–æ –æ–∫—Ä–µ–º–æ================================
// const numbers = [5, 10, 15, 20, 25];

// const logMessage = (number, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// };

// numbers.forEach(logMessage);

//====================================== –Ü–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ ===========================================
// const numbers = [1, 2, 3, 4, 5];
// const filteredNumbers = [];

// for (let i = 0; i < numbers.length; i += 1) {
//   if (numbers[i] > 3) {
//     filteredNumbers.push(numbers[i]);
//   }
// }

// console.log(filteredNumbers); // [4, 5]

//====================================== –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ ===========================================
const numbers = [1, 2, 3, 4, 5];
const filteredNumbers = numbers.filter(value => value > 3);
console.log(filteredNumbers); // [4, 5]