// --------------------------IIFE-------------------------
// (function () {
//   const a = 5;
//   console.log('a:', a);
// })();

// (function () {
//   const a = 15;
//   console.log('a:', a);
// })();

// -------------------------arguments------------------------
// function sum() {
//   let result = 0;

//   for (let i = 0; i < arguments.length; i += 1) {
//     result += arguments[i];
//   }
//   return result;
// }

// console.log(sum(2)); // 2
// console.log(sum(2, 2, 3, 1, 2)); // 10

// -------------------------arguments------------------------
// function multiply() {
//   let result = 1;

//   for (const number of arguments) {
//     result *= number;
//   }
//   return result;
// }
// multiply();
// console.log(multiply(2, 2)); // 4
// console.log(multiply(2, 2, 10)); // 40

// -------------------------arguments +(...rest) –∞–±–æ "—Ä–æ–∑–ø–∏–ª–µ–Ω–Ω—è"------------------------
// function multiply(...rest) {
//   let result = 1;

//   for (const number of rest) {
//     result *= number;
//   }
//   return result;
// }
// multiply();
// console.log(multiply(3, 2)); // 6
// console.log(multiply(2, 2, 10, 10)); // 400

//---------------------------–ó–∞–¥–∞—á–∞ 1 - –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞---------------------------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é calcBMI(weight, height),
//  –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —á–µ–ª–æ–≤–µ–∫–∞.
// –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–µ—Å –≤ –∫–∏–ª–ª–æ–≥—Ä–∞–º–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤—ã—Å–æ—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.
// –í–µ—Å –∏ –≤—ã—Å–æ—Ç–∞ –±—É–¥—É—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏.
// –ù–µ—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –≤–∏–¥–µ 24.7 –∏–ª–∏ 24, 7,
// —Ç–æ –µ—Å—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—è—Ç–∞—è.
// –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π;

// function calcBMI(weight, height) {
//   const weightNum = parseFloat(weight.replace(',', '.'));
//   const heightNum = parseFloat(height.replace(',', '.'));

//   return parseFloat(weightNum / Math.pow(height, 2)).toFixed(1);
// }

// const bmi = calcBMI('88,3', '1.75');
// console.log(bmi); // 28.8
// console.log(calcBMI('99,6', '1.75')); // 32.5

//---------------------------–ó–∞–¥–∞—á–∞ 2 - –ú–µ–Ω—å—à–µ–µ –∏–∑ —á–∏—Å–µ–ª---------------------------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é min(a,b), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—å—à–µ–µ –∏–∑ —á–∏—Å–µ–ª a –∏ b.

// –≤–∞—Ä–∏–∞–Ω—Ç 1
// function min(a, b) {
//   if (a < b) {
//     return a;
//   }
//   return b;
// }
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1
// console.log(min(110, 111)); // 110

// –≤–∞—Ä–∏–∞–Ω—Ç 2
// function min(a, b) {
//   return a < b ? a : b;
// }
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1
// console.log(min(110, 111)); // 110

// –≤–∞—Ä–∏–∞–Ω—Ç 3 (arguments –∏ –±–æ–ª—å—à–µ —á–∏—Å–µ–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
// function min() {
//   let res = arguments[0];
//   for (const num of arguments) {
//     if (num < res) {
//       res = num;
//     }
//   }
//   return res;
// }
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 11)); // 1
// console.log(min(2, 5, -4, 7, 3, 0)); // -4

// –≤–∞—Ä–∏–∞–Ω—Ç 4 (...rest –∏ –±–æ–ª—å—à–µ —á–∏—Å–µ–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
// function min(...rest) {
//   let res = rest[0];
//   for (const num of rest) {
//     if (num < res) {
//       res = num;
//     }
//   }
//   return res;
// }
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 11)); // 1
// console.log(min(2, 5, -4, 7, 3, 0)); // -4

//---------------------------–ó–∞–¥–∞—á–∞ 3 - –ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞---------------------------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é getRectArea(dimensions) –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
// –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä dimensions –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
// –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// function getRectArea(dimensions) {
//   const [x, y] = dimensions.split(' '); [x, y] - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–Ω –Ω–∏–∂–µ
//     // const arr = dimensions.split(' ');
//     // const x = arr[0];
//     // const y = arr[1];
//   return parseFloat(x) * parseFloat(y);
// }

// console.log(getRectArea('8 11')); // 88
// console.log(getRectArea('4 8')); // 32

//---------------------------–ó–∞–¥–∞—á–∞ 4 - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤---------------------------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é logItems(items), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–∏–∫–ª for,
// –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ
// –≤ —Ñ–æ—Ä–º–∞—Ç–µ < –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ > - <–∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ >.
// –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.
// –ù–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ ['Mango', 'Poly', 'Ajax'] —Å –∏–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ 1 - Mango,
//  –∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ 2 –≤—ã–≤–µ–¥–µ—Ç 3 - Ajax.

// function logItems(items) {
// console.log('==================');
//   for (let i = 0; i < items.length; i += 1) {
//     console.log(`${i + 1}-${items[i]}`);
//   }
// }

// logItems(['Mango', 'Poly', 'Ajax']); // 1-Mango...
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']); //1-üçé....

//---------------------------–ó–∞–¥–∞—á–∞ 5 - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤---------------------------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é printContactsInfo(names, phones),
// –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –í –ø–∞—Ä–∞–º–µ—Ç—Ä—ã names –∏ phones –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.
// –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.
// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.
// function printContactsInfo(names, phones) {}

// function printContactsInfo(names, phones) {
//   const namesArr = names.split(',');
//   const phonesArr = phones.split(',');

//   for (let i = 0; i < namesArr.length; i++) {
//     console.log(`${namesArr[i]} : ${phonesArr[i]}`);
//   }

//   console.log(namesArr);
//   console.log(phonesArr);
// }
// printContactsInfo(
//   'Jacob,William,Solomon,Artemis',
//   '89001234567,89001112233,890055566377,890055566300'
// );

//---------------------------–ó–∞–¥–∞—á–∞ 6 - –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞------------------------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é findLargestNumber(numbers),
// –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ.

// function findLargestNumber(numbers) {
//   let maxNumber = numbers[0];

//   for (const number of numbers) {
//     if (number > maxNumber) {
//       maxNumber = number;
//     }
//   }
//   return maxNumber;
// }

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83

//---------------------------–ó–∞–¥–∞—á–∞ 7 - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ-------------------------------------------
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é calAverage(),
// –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª - –≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
// –í—Å–µ –∞—Ä—É–≥–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞–º–∏.

// function calAverage() {
//   let sum = 0;
//   for (const number of arguments) {
//     sum += number;
//   }
//   return sum / arguments.length;
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2

//---------------------------–ó–∞–¥–∞—á–∞ 8 - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏-----------------------------------------

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é formatTime(minutes),
// –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ minutes(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç) –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç HH: MM.

// function formatTime(totalMinutes) {
//   const hours = Math.floor(totalMinutes / 60);
//   const minutes = totalMinutes % 60;

//   const doubleDigitHours = String(hours).padStart(2, 0);
//   const doubleDigitMinutes = String(minutes).padStart(2, 0);

//   return `${doubleDigitHours}:${doubleDigitMinutes}`;
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"

//---------------------------–ó–∞–¥–∞—á–∞ 9 - –ö–æ–ª–ª–µ–∫—Ü–∏—è –∫—É—Ä—Å–æ–≤ (includes, indexOf, push –∏ —Ç. –¥.)-------------------------
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –æ–±—É—á–∞—é—â–∏—Ö –∫—É—Ä—Å–æ–≤ courses:

// addCourse(name) - –¥–æ–±–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–ª–µ–∫—Ü–∏–∏
// removeCourse(name) - —É–¥–∞–ª—è–µ—Ç –∫—É—Ä—Å –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
// updateCourse(oldName, newName) - –∏–∑–º–µ–Ω—è–µ—Ç –∏–º—è –Ω–∞ –Ω–æ–≤–æ–µ

// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// –î–æ–±–∞–≤–ª—è–µ–º –µ–ª–µ–º–µ–Ω—Ç
// function addCourse(name) {
//   if (courses.includes(name)) {
//     return console.log('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –∫—É—Ä—Å');
//   }
//   courses.push(name);
// }

// –†–µ–∑—É–ª—å—Ç–∞—Ç 1
// addCourse('Express'); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// console.log(courses);

// –†–µ–∑—É–ª—å—Ç–∞—Ç 2 (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π)
// addCourse('CSS');
// console.log(courses); // '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –∫—É—Ä—Å'

// =============================================================
// –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–π –Ω–∞ removeCourse
// function removeCourse(name) {
//   name.indexOf(name);
//   return courses.splice(courses.indexOf(name), 1);
// }

// –≤–∞—Ä–∏–∞–Ω—Ç –ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞ removeCourse
// function removeCourse(name) {
//   const idx = courses.indexOf(name);

//   if (idx !== -1) {
//     return courses.splice(idx, 1);
//   } else {
//     console.log('–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
//   }
// }

// // –†–µ–∑—É–ª—å—Ç–∞—Ç;
// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// removeCourse('Vue'); // '–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω'

// =============================================================
// –ó–∞–º–µ–Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∞
// function updateCourse(oldName, newName) {
//   return courses.splice(courses.indexOf(oldName), 1, newName);
// }

// function updateCourse(oldName, newName) {
//   const idx = courses.indexOf(oldName);

//   if (idx !== -1) {
//     courses.splice(idx, 1, newName);
//   } else {
//     console.log('–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
//   }
// }

// –†–µ–∑—É–ª—å—Ç–∞—Ç
// updateCourse('Express', 'NestJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']

//-------------------------------------–ü—Ä–∏–∫–ª–∞–¥ –∑ –ø–∏—Ç–∞–Ω—å----------------------------------
// function findLongestWord(text) {
//   let textArr = text.split(' ');
//   let result = textArr[0];

//   for (const word of textArr) {
//     if (word.length > result.length) {
//       result = word;
//     }

//     // result = word.length > result.length ? word : result;
//   }

//   return result;
// }

// console.log(
//   findLongestWord("I  done it. But I can't understand how it works.")
// );

//-------------------------------------–ü—Ä–∏–∫–ª–∞–¥ –∑ –ø–∏—Ç–∞–Ω—å----------------------------------
// const arr1 = [1, 2, 3, 4, 5, 6];
// const arr2 = [34, 54, 1, 456, 3, 675, 234, 87, 6];
// const res = [];
// for (const number of arr1) {
//   if (arr2.includes(number)) {
//     res.push(number);
//   }
// }
// console.log(res); //[1, 3, 6]
